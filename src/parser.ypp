%{
	#include <bits/stdc++.h>
	#include "program.h"
	#include "block.h"
	#include "statements.h"
	#define YYDEBUG 1
	using namespace std;
	extern "C" int yylex();
	extern int yyparse();
	extern FILE *yyin;
	extern int line_num;
	extern int errors;
	extern union Node yylval;
	int errors = 0;
	void yyerror(const char *s);
	class Program* root = NULL;
%}

%start program

/* -------------------- Tokens ----------------------- */
%token CLASS
%token <value> VOID
%token CALLOUT RETURN
%token FOR IF ELSE
%token BREAK CONTINUE
%token SEMI_COLON COMMA
%token OSB CSB OP CP OFB CFB
%token <value> EQUAL PLUS_EQUAL MINUS_EQUAL
%token <value> ADD SUB DIV MUL MOD
%token <value> LT GT LE GE
%token <value> EQUAL_EQUAL NOT_EQUAL
%token <value> COND_AND COND_OR NOT
%token <value> ID CHAR_LITERAL STRING_LITERAL BOOL_LITERAL TYPE
%token <number> INT_LITERAL

/* ------------------- Precedence ------------------- */
%left EQUAL NOT_EQUAL
%left COND_AND COND_OR
%left LT GT LE GE
%left ADD SUB 
%left MUL DIV MOD
%nonassoc NOT

/* ----------------- Non-Terminals ------------------ */
%type <program> program
%type <fieldDeclarations> field_declarations
%type <fieldDeclaration> field_declaration
%type <vars> vars
%type <var> var
%type <methodDeclarations> method_declarations
%type <methodDeclaration> method_declaration
%type <methodArgs> method_args
%type <methodArgs> method_arg
%type <block> block
%type <varDeclarations> var_declarations
%type <varDeclaration> var_declaration
%type <moreIds> more_ids
%type <stmts> statements
%type <stmt> statement
%type <assgnStmt> assignment
%type <loc> location
%type <value> assign_op
%type <methodCallStmt> method_call
%type <methodCallParams> method_call_params
%type <calloutArgs> callout_args
%type <calloutArg> callout_arg
%type <literal> literal 
%type <expr> expr

/* ----------------- Grammar Rules ------------------ */
%%

program:
	CLASS ID OFB field_declarations method_declarations CFB 	
		{ 
			$$ = new Program($2, $4, $5); 
			root = $$;
		}
	;

field_declarations:
	/* epsilon */		{ $$ = new FieldDeclarations(); }
	| field_declarations field_declaration SEMI_COLON	{ $$->addFieldDeclaration($2); }
	;

field_declaration:
	TYPE vars 	{ $$ = new FieldDeclaration($1, $2); }
	;

vars:
	var 	{ $$ = new Variables(); $$->addVariable($1); }
	| vars COMMA var 	{ $$->addVariable($3); }
	;

var:
	ID 		{ $$ = new Variable($1); }
	| ID OSB INT_LITERAL CSB 	{ $$ = new Variable($1, $3); }
	;

method_declarations:
	/* epsilon */	{ $$ = new MethodDeclarations(); }
	| method_declaration method_declarations	
		{ 
			$2->addMethodDecl($1); 
			$$ = $2;
		}
	;

method_declaration:
	TYPE ID method_args block	{ $$ = new MethodDeclaration($1, $2, $3, $4); }
	| VOID ID method_args block		{ $$ = new MethodDeclaration($1, $2, $3, $4); }
	;

method_args:
	OP CP 	{ $$ = new MethodArgs(); }
	| OP TYPE ID method_arg CP 		
		{
			MethodArg *methodArg = new MethodArg($2, $3);
			$4->addMethodArg(methodArg);
			$$ = $4;
		}
	;

method_arg:
	/* epsilon */	{ $$ = new MethodArgs(); }
	| COMMA TYPE ID method_arg
		{
			MethodArg *methodArg = new MethodArg($2, $3);
			$4->addMethodArg(methodArg);
			$$ = $4;
		}
	;

block:
	OFB var_declarations statements CFB		{ $$ = new Block($2, $3); }
	;

var_declarations:
	/* epsilon */	{ $$ = new VarDeclarations(); }
	| var_declaration SEMI_COLON var_declarations	
		{ 
			$3->addVarDecl($1); 
			$$ = $3;
		}
	;

var_declaration:
	TYPE ID more_ids	
		{ 
			$3->addId($2); 
			$$ = new VarDeclaration($1, $3); 
		}
	;

more_ids:
	/* epsilon */	{ $$ = new MoreIDs(); }
	| COMMA ID more_ids	
		{
			$3->addId($2);
			$$ = $3;
		}
	;

statements:
	/* epsilon */	{ $$ = new Statements(); }
	| statements statement
		{
			$1->addStmt($2);
			$$ = $1;
		}
	;

statement:
	assignment 		{ $$ = $1; }
	| method_call SEMI_COLON	{ $$ = $1; }
	| IF OP expr CP block 	{ $$ = new IfElseStmt($3, $5, NULL); }
	| IF OP expr CP block ELSE block 	{ $$ = new IfElseStmt($3, $5, $7); }
	| FOR ID EQUAL expr COMMA expr block 	{ $$ = new ForStmt($2, $4, $6, $7); }
	| RETURN SEMI_COLON 	{ $$ = new ReturnStmt(NULL); }
	| RETURN expr SEMI_COLON 	{ $$ = new ReturnStmt($2); }
	| BREAK SEMI_COLON 		{ $$ = new BreakStmt(); }
	| CONTINUE SEMI_COLON 	{ $$ = new ContinueStmt(); }
	| block 	{ $$ = $1; }
	;

assignment:
	location assign_op expr SEMI_COLON		{ $$ = new AssignmentStmt($1, $2, $3); }
	;

assign_op:
	EQUAL 		{ $$ = $1; }
	| PLUS_EQUAL	{ $$ = $1; }
	| MINUS_EQUAL	{ $$ = $1; }
	;

method_call:
	ID OP method_call_params CP 	{ $$ = new MethodCall($1, $3); }
	| CALLOUT OP STRING_LITERAL callout_args CP 	{ $$ = new CalloutMethodCall($3, $4); }
	;

method_call_params:
	expr 	
		{ 
			$$ = new MethodCallParams(); 
			$$->addMethodCallParam($1);
		}
	| method_call_params COMMA expr 	{ $$->addMethodCallParam($3); }
	;

callout_args:
	/* epsilon */ 	{ $$ = new CalloutArgs(); }
	| callout_args COMMA callout_arg 	{ $$->addCalloutArg($3); }
	;

callout_arg:
	expr 	{ $$ = new CalloutArg($1); }
	| STRING_LITERAL	{ $$ = new CalloutArg($1); }
	;

location:
	ID 		{ $$ = new Location($1); }
	| ID OSB expr CSB	{ $$ = new Location($1, $3); }
	;

expr:
 	OP expr CP 		{ $$ = new EnclosedExpression($2); }
	| location 		{ $$ = $1; }
	| method_call 	{ $$ = $1; }
	| literal 	{ $$ = $1; }
	| expr ADD expr 	{ $$ = new BinaryExpression($1, $2, $3); }
	| expr SUB expr 	{ $$ = new BinaryExpression($1, $2, $3); }
	| expr MUL expr 	{ $$ = new BinaryExpression($1, $2, $3); }
	| expr DIV expr 	{ $$ = new BinaryExpression($1, $2, $3); }
	| expr MOD expr 	{ $$ = new BinaryExpression($1, $2, $3); }
	| expr LT expr 	{ $$ = new BinaryExpression($1, $2, $3); }
	| expr GT expr 	{ $$ = new BinaryExpression($1, $2, $3); }
	| expr LE expr 	{ $$ = new BinaryExpression($1, $2, $3); }
	| expr GE expr 	{ $$ = new BinaryExpression($1, $2, $3); }
	| expr EQUAL_EQUAL expr 	{ $$ = new BinaryExpression($1, $2, $3); }
	| expr NOT_EQUAL expr 	{ $$ = new BinaryExpression($1, $2, $3); }
	| expr COND_AND expr 	{ $$ = new BinaryExpression($1, $2, $3); }
	| expr COND_OR expr 	{ $$ = new BinaryExpression($1, $2, $3); }
	| SUB expr 		{ $$ = new UnaryExpression($1, $2); }
	| NOT expr 		{ $$ = new UnaryExpression($1, $2); }
	;

literal:
	INT_LITERAL 	{ $$ = new Literal($1, 1); }
	| CHAR_LITERAL 	{ $$ = new Literal($1, 2); }
	| BOOL_LITERAL	{ $$ = new Literal($1, 3); }
	;

%%

int main(int argc, char **argv)
{
	if (argc == 1) {
		cout << "No input file given" << endl;
		return 0;
	}

	FILE *file = fopen(argv[1], "r");
	if (file == NULL) {
		cout << argv[1] << " cannot be opened!" << endl;
		return 0;
	}
	int l = 0;

	yyin = file;
	yydebug = 1;
	do {
		yyparse();
	} while (!feof(yyin));

	cerr << "Parsed Successfully!";
	cerr << "\n-----------------------------------------------------------\n\n";

	// code gen
	if (start) {
		start->codeGen();
	}

	return 0;
}

void yyerror(const char *s) {
	errors++;
	printf("Error:%s at %d\n", s, line_num);
  	exit(-1);
}