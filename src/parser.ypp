%{
	#include <bits/stdc++.h>
	#include "program.h"
	#define YYDEBUG 1
	using namespace std;
	extern "C" int yylex();
	extern int yyparse();
	extern FILE *yyin;
	extern int line_num;
	extern int errors;
	extern union Node yylval;
	int errors = 0;
	void yyerror(const char *s);
	class Program* root = NULL;
%}

%start program

/* -------------------- Tokens ----------------------- */
%token CLASS
%token VOID
%token CALLOUT RETURN
%token FOR IF ELSE
%token BREAK CONTINUE
%token SEMI_COLON COMMA
%token OSB CSB OP CP OFB CFB
%token EQUAL PLUS_EQUAL MINUS_EQUAL
%token ADD SUB DIV MUL MOD
%token LT GT LE GE
%token EQUAL_EQUAL NOT_EQUAL
%token COND_AND COND_OR NOT
%token <value> ID CHAR_LITERAL STRING_LITERAL BOOL_LITERAL TYPE
%token <number> INT_LITERAL

/* ------------------- Precedence ------------------- */
%left EQUAL NOT_EQUAL
%left COND_AND COND_OR
%left LT GT LE GE
%left ADD SUB 
%left MUL DIV MOD
%nonassoc NOT

/* ----------------- Non-Terminals ------------------ */
%type <program> program
%type <fieldDeclarations> field_declarations
%type <fieldDeclaration> field_declaration
%type <vars> vars
%type <var> var

/* ----------------- Grammar Rules ------------------ */
%%

program:
	CLASS ID OFB field_declarations method_declarations CFB 	
	{ 
		$$ = new Program(string($2), $4); 
		root = $$;
	}
	;

field_declarations:
	/* epsilon */										{ $$ = new FieldDeclarations(); }
	| field_declarations field_declaration SEMI_COLON	{ $$->addFieldDeclaration($2); }
	;

field_declaration:
	TYPE vars 	{ $$ = new FieldDeclaration(string($1), $2); }
	;

vars:
	var 				{ $$ = new Variables(); $$->addVariable($1); }
	| vars COMMA var 	{ $$->addVariable($3); }
	;

var:
	ID 							{ $$ = new Variable(string($1)); }
	| ID OSB INT_LITERAL CSB 	{ $$ = new Variable(string($1), $3); }
	;

method_declarations:
	/* epsilon */
	| method_declaration method_declarations
	;

method_declaration:
	TYPE ID method_args block
	| VOID ID method_args block
	;

method_args:
	OP CP
	| OP TYPE ID method_arg CP
	;

method_arg:
	/* epsilon */
	| COMMA TYPE ID method_arg
	;

block:
	OFB var_declarations statements CFB
	;

var_declarations:
	/* epsilon */
	| TYPE ID more_var_decl
	;

more_var_decl:
	SEMI_COLON
	| COMMA ID more_var_decl
	;

statements:
	/* epsilon */
	| statements statement
	;

statement:
	location assign_op expr SEMI_COLON
	| method_call SEMI_COLON
	| IF OP expr CP block
	| IF OP expr CP block ELSE block
	| FOR ID EQUAL expr COMMA expr block
	| RETURN SEMI_COLON
	| RETURN expr SEMI_COLON
	| BREAK SEMI_COLON
	| CONTINUE SEMI_COLON
	| block
	;

assign_op:
	EQUAL
	| PLUS_EQUAL
	| MINUS_EQUAL
	;

method_call:
	method_name OP method_call_params CP
	| CALLOUT OP STRING_LITERAL callout_args CP
	;

method_name:
	ID
	;

method_call_params:
	expr
	| method_call_params COMMA expr
	;

callout_args:
	callout_arg
	| callout_args COMMA callout_arg
	;

callout_arg:
	/* epsilon */
	| expr
	| STRING_LITERAL
	;

location:
	ID 
	| ID OSB expr CSB
	;

expr:
 	OP expr CP
	| location
	| method_call
	| literal
	| expr bin_op expr
	| SUB expr
	| NOT expr
	;

bin_op:
	arith_op
	| rel_op
	| eq_op
	| cond_op
	;

arith_op:
	ADD
	| SUB
	| MUL
	| DIV
	| MOD
	;

rel_op:
	LT
	| GT
	| LE
	| GE
	;

eq_op:
	EQUAL_EQUAL
	| NOT_EQUAL
	;

cond_op:
	COND_AND
	| COND_OR
	;

literal:
	INT_LITERAL
	| CHAR_LITERAL
	| BOOL_LITERAL
	;

%%

int main(int argc, char **argv)
{
	if (argc == 1) {
		cout << "No input file given" << endl;
		return 0;
	}

	FILE *file = fopen(argv[1], "r");
	if (file == NULL) {
		cout << argv[1] << " cannot be opened!" << endl;
		return 0;
	}
	int l = 0;

	yyin = file;
	yydebug = 1;
	do {
		yyparse();
	} while (!feof(yyin));

	cerr << "Parsed Successfully!";

	return 0;
}

void yyerror(const char *s) {
	errors++;
	printf("Error:%s at %d\n", s, line_num);
  	exit(-1);
}