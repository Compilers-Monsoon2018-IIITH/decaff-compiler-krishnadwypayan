// Roll No.: 20172076
// Quick sort

class Program {
	
	int n , arr [ 10 ] ;
	n = 10 ;

	int partition ( int low , int high ) {
		int pivot , i , j ;
		pivot = arr [ high ] ;
	    
	    i = ( low - 1 ) ;  // Index of smaller element 
	  
	    for j = low , j <= high - 1 { 
	        // If current element is smaller than or equal to pivot 
	        if ( arr [ j ] <= pivot ) { 
	            i += 1 ;
	            
	            int temp ;
	            temp = arr [ i ] ;
	            arr [ i ] = arr [ j ] ;
	            arr [ j ] = temp ;
	        } 

	        j += 1 ;
	    } 

	    int temp ;
        temp = arr [ i + 1 ] ;
        arr [ i + 1 ] = arr [ high ] ;
        arr [ high ] = temp ;

	    return ( i + 1 ) ; 
	}

	void quickSort ( int low , int high ) {
		if ( low < high ) {
			int pivot ;
			pivot = partition ( low, high ) ;

			quickSort ( low , pivot - 1 );
			quickSort ( pivot + 1 , high );
		}
	}

	int main () {
		int i , j ;
		
		// Fill out the array
		arr [ 0 ] = 5678 ;
		arr [ 1 ] = 12 ;
		arr [ 2 ] = 332 ;
		arr [ 3 ] = 18992 ;
		arr [ 4 ] = 23 ;
		arr [ 5 ] = 459 ;
		arr [ 6 ] = 89001 ;
		arr [ 7 ] = 123412 ;
		arr [ 8 ] = 21 ;
		arr [ 9 ] = 90 ;

		for i = 0 , i < n - 1 {
			for j = 0 , j < n - i - 1 {
				if ( arr [ j ] > arr [ j + 1 ] ) {
					// swap
					int temp ;
					temp = arr [ j ] ;
					arr [ j ] = arr [ j + 1 ] ;
					arr [ j + 1 ] = temp ;
				}
				j += 1 ;
			}
			i += 1 ;
		}

		return 0 ;
	}

}